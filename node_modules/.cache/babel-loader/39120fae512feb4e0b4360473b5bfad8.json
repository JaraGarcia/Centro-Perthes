{"ast":null,"code":"var crypto = require('crypto'),\n  qs = require('querystring');\nfunction sha1(key, body) {\n  return crypto.createHmac('sha1', key).update(body).digest('base64');\n}\nfunction rfc3986(str) {\n  return encodeURIComponent(str).replace(/!/g, '%21').replace(/\\*/g, '%2A').replace(/\\(/g, '%28').replace(/\\)/g, '%29').replace(/'/g, '%27');\n}\nfunction hmacsign(httpMethod, base_uri, params, consumer_secret, token_secret) {\n  // adapted from https://dev.twitter.com/docs/auth/oauth and \n  // https://dev.twitter.com/docs/auth/creating-signature\n\n  var querystring = Object.keys(params).sort().map(function (key) {\n    // big WTF here with the escape + encoding but it's what twitter wants\n    return escape(rfc3986(key)) + \"%3D\" + escape(rfc3986(params[key]));\n  }).join('%26');\n  var base = [httpMethod ? httpMethod.toUpperCase() : 'GET', rfc3986(base_uri), querystring].join('&');\n  var key = [consumer_secret, token_secret || ''].map(rfc3986).join('&');\n  return sha1(key, base);\n}\nexports.hmacsign = hmacsign;\nexports.rfc3986 = rfc3986;","map":{"version":3,"names":["crypto","require","qs","sha1","key","body","createHmac","update","digest","rfc3986","str","encodeURIComponent","replace","hmacsign","httpMethod","base_uri","params","consumer_secret","token_secret","querystring","Object","keys","sort","map","escape","join","base","toUpperCase","exports"],"sources":["/Users/jaraga/CodeOp/perthesclinica/node_modules/oauth-sign/index.js"],"sourcesContent":["var crypto = require('crypto')\n  , qs = require('querystring')\n  ;\n\nfunction sha1 (key, body) {\n  return crypto.createHmac('sha1', key).update(body).digest('base64')\n}\n\nfunction rfc3986 (str) {\n  return encodeURIComponent(str)\n    .replace(/!/g,'%21')\n    .replace(/\\*/g,'%2A')\n    .replace(/\\(/g,'%28')\n    .replace(/\\)/g,'%29')\n    .replace(/'/g,'%27')\n    ;\n}\n\nfunction hmacsign (httpMethod, base_uri, params, consumer_secret, token_secret) {\n  // adapted from https://dev.twitter.com/docs/auth/oauth and \n  // https://dev.twitter.com/docs/auth/creating-signature\n\n  var querystring = Object.keys(params).sort().map(function(key){\n    // big WTF here with the escape + encoding but it's what twitter wants\n    return escape(rfc3986(key)) + \"%3D\" + escape(rfc3986(params[key]))\n  }).join('%26')\n\n  var base = [\n    httpMethod ? httpMethod.toUpperCase() : 'GET',\n    rfc3986(base_uri),\n    querystring\n  ].join('&')\n\n  var key = [\n    consumer_secret,\n    token_secret || ''\n  ].map(rfc3986).join('&')\n\n  return sha1(key, base)\n}\n\nexports.hmacsign = hmacsign\nexports.rfc3986 = rfc3986\n"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;EAC1BC,EAAE,GAAGD,OAAO,CAAC,aAAa,CAAC;AAG/B,SAASE,IAAI,CAAEC,GAAG,EAAEC,IAAI,EAAE;EACxB,OAAOL,MAAM,CAACM,UAAU,CAAC,MAAM,EAAEF,GAAG,CAAC,CAACG,MAAM,CAACF,IAAI,CAAC,CAACG,MAAM,CAAC,QAAQ,CAAC;AACrE;AAEA,SAASC,OAAO,CAAEC,GAAG,EAAE;EACrB,OAAOC,kBAAkB,CAACD,GAAG,CAAC,CAC3BE,OAAO,CAAC,IAAI,EAAC,KAAK,CAAC,CACnBA,OAAO,CAAC,KAAK,EAAC,KAAK,CAAC,CACpBA,OAAO,CAAC,KAAK,EAAC,KAAK,CAAC,CACpBA,OAAO,CAAC,KAAK,EAAC,KAAK,CAAC,CACpBA,OAAO,CAAC,IAAI,EAAC,KAAK,CAAC;AAExB;AAEA,SAASC,QAAQ,CAAEC,UAAU,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,eAAe,EAAEC,YAAY,EAAE;EAC9E;EACA;;EAEA,IAAIC,WAAW,GAAGC,MAAM,CAACC,IAAI,CAACL,MAAM,CAAC,CAACM,IAAI,EAAE,CAACC,GAAG,CAAC,UAASnB,GAAG,EAAC;IAC5D;IACA,OAAOoB,MAAM,CAACf,OAAO,CAACL,GAAG,CAAC,CAAC,GAAG,KAAK,GAAGoB,MAAM,CAACf,OAAO,CAACO,MAAM,CAACZ,GAAG,CAAC,CAAC,CAAC;EACpE,CAAC,CAAC,CAACqB,IAAI,CAAC,KAAK,CAAC;EAEd,IAAIC,IAAI,GAAG,CACTZ,UAAU,GAAGA,UAAU,CAACa,WAAW,EAAE,GAAG,KAAK,EAC7ClB,OAAO,CAACM,QAAQ,CAAC,EACjBI,WAAW,CACZ,CAACM,IAAI,CAAC,GAAG,CAAC;EAEX,IAAIrB,GAAG,GAAG,CACRa,eAAe,EACfC,YAAY,IAAI,EAAE,CACnB,CAACK,GAAG,CAACd,OAAO,CAAC,CAACgB,IAAI,CAAC,GAAG,CAAC;EAExB,OAAOtB,IAAI,CAACC,GAAG,EAAEsB,IAAI,CAAC;AACxB;AAEAE,OAAO,CAACf,QAAQ,GAAGA,QAAQ;AAC3Be,OAAO,CAACnB,OAAO,GAAGA,OAAO"},"metadata":{},"sourceType":"script"}