{"ast":null,"code":"// Copyright 2012 Joyent, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar crypto = require('crypto');\nvar http = require('http');\nvar sprintf = require('util').format;\n\n///--- Globals\n\nvar Algorithms = {\n  'rsa-sha1': true,\n  'rsa-sha256': true,\n  'rsa-sha512': true,\n  'dsa-sha1': true,\n  'hmac-sha1': true,\n  'hmac-sha256': true,\n  'hmac-sha512': true\n};\nvar Authorization = 'Signature keyId=\"%s\",algorithm=\"%s\",headers=\"%s\",signature=\"%s\"';\n\n///--- Specific Errors\n\nfunction MissingHeaderError(message) {\n  this.name = 'MissingHeaderError';\n  this.message = message;\n  this.stack = new Error().stack;\n}\nMissingHeaderError.prototype = new Error();\nfunction InvalidAlgorithmError(message) {\n  this.name = 'InvalidAlgorithmError';\n  this.message = message;\n  this.stack = new Error().stack;\n}\nInvalidAlgorithmError.prototype = new Error();\n\n///--- Internal Functions\n\nfunction _pad(val) {\n  if (parseInt(val, 10) < 10) {\n    val = '0' + val;\n  }\n  return val;\n}\nfunction _rfc1123() {\n  var date = new Date();\n  var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  var days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  return days[date.getUTCDay()] + ', ' + _pad(date.getUTCDate()) + ' ' + months[date.getUTCMonth()] + ' ' + date.getUTCFullYear() + ' ' + _pad(date.getUTCHours()) + ':' + _pad(date.getUTCMinutes()) + ':' + _pad(date.getUTCSeconds()) + ' GMT';\n}\n\n///--- Exported API\n\nmodule.exports = {\n  /**\n   * Adds an 'Authorization' header to an http.ClientRequest object.\n   *\n   * Note that this API will add a Date header if it's not already set. Any\n   * other headers in the options.headers array MUST be present, or this\n   * will throw.\n   *\n   * You shouldn't need to check the return type; it's just there if you want\n   * to be pedantic.\n   *\n   * @param {Object} request an instance of http.ClientRequest.\n   * @param {Object} options signing parameters object:\n   *                   - {String} keyId required.\n   *                   - {String} key required (either a PEM or HMAC key).\n   *                   - {Array} headers optional; defaults to ['date'].\n   *                   - {String} algorithm optional; defaults to 'rsa-sha256'.\n   *                   - {String} httpVersion optional; defaults to '1.1'.\n   * @return {Boolean} true if Authorization (and optionally Date) were added.\n   * @throws {TypeError} on bad parameter types (input).\n   * @throws {InvalidAlgorithmError} if algorithm was bad.\n   * @throws {MissingHeaderError} if a header to be signed was specified but\n   *                              was not present.\n   */\n  signRequest: function signRequest(request, options) {\n    assert.object(request, 'request');\n    assert.object(options, 'options');\n    assert.optionalString(options.algorithm, 'options.algorithm');\n    assert.string(options.keyId, 'options.keyId');\n    assert.optionalArrayOfString(options.headers, 'options.headers');\n    assert.optionalString(options.httpVersion, 'options.httpVersion');\n    if (!request.getHeader('Date')) request.setHeader('Date', _rfc1123());\n    if (!options.headers) options.headers = ['date'];\n    if (!options.algorithm) options.algorithm = 'rsa-sha256';\n    if (!options.httpVersion) options.httpVersion = '1.1';\n    options.algorithm = options.algorithm.toLowerCase();\n    if (!Algorithms[options.algorithm]) throw new InvalidAlgorithmError(options.algorithm + ' is not supported');\n    var i;\n    var stringToSign = '';\n    for (i = 0; i < options.headers.length; i++) {\n      if (typeof options.headers[i] !== 'string') throw new TypeError('options.headers must be an array of Strings');\n      var h = options.headers[i].toLowerCase();\n      if (h !== 'request-line') {\n        var value = request.getHeader(h);\n        if (!value) {\n          throw new MissingHeaderError(h + ' was not in the request');\n        }\n        stringToSign += h + ': ' + value;\n      } else {\n        stringToSign += request.method + ' ' + request.path + ' HTTP/' + options.httpVersion;\n      }\n      if (i + 1 < options.headers.length) stringToSign += '\\n';\n    }\n    var alg = options.algorithm.match(/(hmac|rsa)-(\\w+)/);\n    var signature;\n    if (alg[1] === 'hmac') {\n      var hmac = crypto.createHmac(alg[2].toUpperCase(), options.key);\n      hmac.update(stringToSign);\n      signature = hmac.digest('base64');\n    } else {\n      var signer = crypto.createSign(options.algorithm.toUpperCase());\n      signer.update(stringToSign);\n      signature = signer.sign(options.key, 'base64');\n    }\n    request.setHeader('Authorization', sprintf(Authorization, options.keyId, options.algorithm, options.headers.join(' '), signature));\n    return true;\n  }\n};","map":{"version":3,"names":["assert","require","crypto","http","sprintf","format","Algorithms","Authorization","MissingHeaderError","message","name","stack","Error","prototype","InvalidAlgorithmError","_pad","val","parseInt","_rfc1123","date","Date","months","days","getUTCDay","getUTCDate","getUTCMonth","getUTCFullYear","getUTCHours","getUTCMinutes","getUTCSeconds","module","exports","signRequest","request","options","object","optionalString","algorithm","string","keyId","optionalArrayOfString","headers","httpVersion","getHeader","setHeader","toLowerCase","i","stringToSign","length","TypeError","h","value","method","path","alg","match","signature","hmac","createHmac","toUpperCase","key","update","digest","signer","createSign","sign","join"],"sources":["/Users/jaraga/CodeOp/perthesclinica/node_modules/http-signature/lib/signer.js"],"sourcesContent":["// Copyright 2012 Joyent, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar crypto = require('crypto');\nvar http = require('http');\n\nvar sprintf = require('util').format;\n\n\n\n///--- Globals\n\nvar Algorithms = {\n  'rsa-sha1': true,\n  'rsa-sha256': true,\n  'rsa-sha512': true,\n  'dsa-sha1': true,\n  'hmac-sha1': true,\n  'hmac-sha256': true,\n  'hmac-sha512': true\n};\n\nvar Authorization =\n  'Signature keyId=\"%s\",algorithm=\"%s\",headers=\"%s\",signature=\"%s\"';\n\n\n\n///--- Specific Errors\n\nfunction MissingHeaderError(message) {\n    this.name = 'MissingHeaderError';\n    this.message = message;\n    this.stack = (new Error()).stack;\n}\nMissingHeaderError.prototype = new Error();\n\n\nfunction InvalidAlgorithmError(message) {\n    this.name = 'InvalidAlgorithmError';\n    this.message = message;\n    this.stack = (new Error()).stack;\n}\nInvalidAlgorithmError.prototype = new Error();\n\n\n\n///--- Internal Functions\n\nfunction _pad(val) {\n  if (parseInt(val, 10) < 10) {\n    val = '0' + val;\n  }\n  return val;\n}\n\n\nfunction _rfc1123() {\n  var date = new Date();\n\n  var months = ['Jan',\n                'Feb',\n                'Mar',\n                'Apr',\n                'May',\n                'Jun',\n                'Jul',\n                'Aug',\n                'Sep',\n                'Oct',\n                'Nov',\n                'Dec'];\n  var days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  return days[date.getUTCDay()] + ', ' +\n    _pad(date.getUTCDate()) + ' ' +\n    months[date.getUTCMonth()] + ' ' +\n    date.getUTCFullYear() + ' ' +\n    _pad(date.getUTCHours()) + ':' +\n    _pad(date.getUTCMinutes()) + ':' +\n    _pad(date.getUTCSeconds()) +\n    ' GMT';\n}\n\n\n\n///--- Exported API\n\nmodule.exports = {\n\n  /**\n   * Adds an 'Authorization' header to an http.ClientRequest object.\n   *\n   * Note that this API will add a Date header if it's not already set. Any\n   * other headers in the options.headers array MUST be present, or this\n   * will throw.\n   *\n   * You shouldn't need to check the return type; it's just there if you want\n   * to be pedantic.\n   *\n   * @param {Object} request an instance of http.ClientRequest.\n   * @param {Object} options signing parameters object:\n   *                   - {String} keyId required.\n   *                   - {String} key required (either a PEM or HMAC key).\n   *                   - {Array} headers optional; defaults to ['date'].\n   *                   - {String} algorithm optional; defaults to 'rsa-sha256'.\n   *                   - {String} httpVersion optional; defaults to '1.1'.\n   * @return {Boolean} true if Authorization (and optionally Date) were added.\n   * @throws {TypeError} on bad parameter types (input).\n   * @throws {InvalidAlgorithmError} if algorithm was bad.\n   * @throws {MissingHeaderError} if a header to be signed was specified but\n   *                              was not present.\n   */\n  signRequest: function signRequest(request, options) {\n    assert.object(request, 'request');\n    assert.object(options, 'options');\n    assert.optionalString(options.algorithm, 'options.algorithm');\n    assert.string(options.keyId, 'options.keyId');\n    assert.optionalArrayOfString(options.headers, 'options.headers');\n    assert.optionalString(options.httpVersion, 'options.httpVersion');\n\n    if (!request.getHeader('Date'))\n      request.setHeader('Date', _rfc1123());\n    if (!options.headers)\n      options.headers = ['date'];\n    if (!options.algorithm)\n      options.algorithm = 'rsa-sha256';\n    if (!options.httpVersion)\n      options.httpVersion = '1.1';\n\n    options.algorithm = options.algorithm.toLowerCase();\n\n    if (!Algorithms[options.algorithm])\n      throw new InvalidAlgorithmError(options.algorithm + ' is not supported');\n\n    var i;\n    var stringToSign = '';\n    for (i = 0; i < options.headers.length; i++) {\n      if (typeof (options.headers[i]) !== 'string')\n        throw new TypeError('options.headers must be an array of Strings');\n\n      var h = options.headers[i].toLowerCase();\n\n      if (h !== 'request-line') {\n        var value = request.getHeader(h);\n        if (!value) {\n          throw new MissingHeaderError(h + ' was not in the request');\n        }\n        stringToSign += h + ': ' + value;\n      } else {\n        stringToSign +=\n          request.method + ' ' + request.path + ' HTTP/' + options.httpVersion;\n      }\n\n      if ((i + 1) < options.headers.length)\n        stringToSign += '\\n';\n    }\n\n    var alg = options.algorithm.match(/(hmac|rsa)-(\\w+)/);\n    var signature;\n    if (alg[1] === 'hmac') {\n      var hmac = crypto.createHmac(alg[2].toUpperCase(), options.key);\n      hmac.update(stringToSign);\n      signature = hmac.digest('base64');\n    } else {\n      var signer = crypto.createSign(options.algorithm.toUpperCase());\n      signer.update(stringToSign);\n      signature = signer.sign(options.key, 'base64');\n    }\n\n    request.setHeader('Authorization', sprintf(Authorization,\n                                               options.keyId,\n                                               options.algorithm,\n                                               options.headers.join(' '),\n                                               signature));\n\n    return true;\n  }\n\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}