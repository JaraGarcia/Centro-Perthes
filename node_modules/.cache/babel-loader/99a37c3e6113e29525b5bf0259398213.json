{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\nmodule.exports = ForeverAgent;\nForeverAgent.SSL = ForeverAgentSSL;\nvar util = require('util'),\n  Agent = require('http').Agent,\n  net = require('net'),\n  tls = require('tls'),\n  AgentSSL = require('https').Agent;\nfunction ForeverAgent(options) {\n  var self = this;\n  self.options = options || {};\n  self.requests = {};\n  self.sockets = {};\n  self.freeSockets = {};\n  self.maxSockets = self.options.maxSockets || Agent.defaultMaxSockets;\n  self.minSockets = self.options.minSockets || ForeverAgent.defaultMinSockets;\n  self.on('free', function (socket, host, port) {\n    var name = host + ':' + port;\n    if (self.requests[name] && self.requests[name].length) {\n      self.requests[name].shift().onSocket(socket);\n    } else if (self.sockets[name].length < self.minSockets) {\n      if (!self.freeSockets[name]) self.freeSockets[name] = [];\n      self.freeSockets[name].push(socket);\n\n      // if an error happens while we don't use the socket anyway, meh, throw the socket away\n      var onIdleError = function () {\n        socket.destroy();\n      };\n      socket._onIdleError = onIdleError;\n      socket.on('error', onIdleError);\n    } else {\n      // If there are no pending requests just destroy the\n      // socket and it will get removed from the pool. This\n      // gets us out of timeout issues and allows us to\n      // default to Connection:keep-alive.\n      socket.destroy();\n    }\n  });\n}\nutil.inherits(ForeverAgent, Agent);\nForeverAgent.defaultMinSockets = 5;\nForeverAgent.prototype.createConnection = net.createConnection;\nForeverAgent.prototype.addRequestNoreuse = Agent.prototype.addRequest;\nForeverAgent.prototype.addRequest = function (req, host, port) {\n  var name = host + ':' + port;\n  if (this.freeSockets[name] && this.freeSockets[name].length > 0 && !req.useChunkedEncodingByDefault) {\n    var idleSocket = this.freeSockets[name].pop();\n    idleSocket.removeListener('error', idleSocket._onIdleError);\n    delete idleSocket._onIdleError;\n    req._reusedSocket = true;\n    req.onSocket(idleSocket);\n  } else {\n    this.addRequestNoreuse(req, host, port);\n  }\n};\nForeverAgent.prototype.removeSocket = function (s, name, host, port) {\n  if (this.sockets[name]) {\n    var index = this.sockets[name].indexOf(s);\n    if (index !== -1) {\n      this.sockets[name].splice(index, 1);\n    }\n  } else if (this.sockets[name] && this.sockets[name].length === 0) {\n    // don't leak\n    delete this.sockets[name];\n    delete this.requests[name];\n  }\n  if (this.freeSockets[name]) {\n    var index = this.freeSockets[name].indexOf(s);\n    if (index !== -1) {\n      this.freeSockets[name].splice(index, 1);\n      if (this.freeSockets[name].length === 0) {\n        delete this.freeSockets[name];\n      }\n    }\n  }\n  if (this.requests[name] && this.requests[name].length) {\n    // If we have pending requests and a socket gets closed a new one\n    // needs to be created to take over in the pool for the one that closed.\n    this.createSocket(name, host, port).emit('free');\n  }\n};\nfunction ForeverAgentSSL(options) {\n  ForeverAgent.call(this, options);\n}\nutil.inherits(ForeverAgentSSL, ForeverAgent);\nForeverAgentSSL.prototype.createConnection = createConnectionSSL;\nForeverAgentSSL.prototype.addRequestNoreuse = AgentSSL.prototype.addRequest;\nfunction createConnectionSSL(port, host, options) {\n  if (typeof port === 'object') {\n    options = port;\n  } else if (typeof host === 'object') {\n    options = host;\n  } else if (typeof options === 'object') {\n    options = options;\n  } else {\n    options = {};\n  }\n  if (typeof port === 'number') {\n    options.port = port;\n  }\n  if (typeof host === 'string') {\n    options.host = host;\n  }\n  return tls.connect(options);\n}","map":{"version":3,"names":["module","exports","ForeverAgent","SSL","ForeverAgentSSL","util","require","Agent","net","tls","AgentSSL","options","self","requests","sockets","freeSockets","maxSockets","defaultMaxSockets","minSockets","defaultMinSockets","on","socket","host","port","name","length","shift","onSocket","push","onIdleError","destroy","_onIdleError","inherits","prototype","createConnection","addRequestNoreuse","addRequest","req","useChunkedEncodingByDefault","idleSocket","pop","removeListener","_reusedSocket","removeSocket","s","index","indexOf","splice","createSocket","emit","call","createConnectionSSL","connect"],"sources":["/Users/jaraga/CodeOp/perthesclinica/node_modules/forever-agent/index.js"],"sourcesContent":["module.exports = ForeverAgent\nForeverAgent.SSL = ForeverAgentSSL\n\nvar util = require('util')\n  , Agent = require('http').Agent\n  , net = require('net')\n  , tls = require('tls')\n  , AgentSSL = require('https').Agent\n\nfunction ForeverAgent(options) {\n  var self = this\n  self.options = options || {}\n  self.requests = {}\n  self.sockets = {}\n  self.freeSockets = {}\n  self.maxSockets = self.options.maxSockets || Agent.defaultMaxSockets\n  self.minSockets = self.options.minSockets || ForeverAgent.defaultMinSockets\n  self.on('free', function(socket, host, port) {\n    var name = host + ':' + port\n    if (self.requests[name] && self.requests[name].length) {\n      self.requests[name].shift().onSocket(socket)\n    } else if (self.sockets[name].length < self.minSockets) {\n      if (!self.freeSockets[name]) self.freeSockets[name] = []\n      self.freeSockets[name].push(socket)\n      \n      // if an error happens while we don't use the socket anyway, meh, throw the socket away\n      var onIdleError = function() {\n        socket.destroy()\n      }\n      socket._onIdleError = onIdleError\n      socket.on('error', onIdleError)\n    } else {\n      // If there are no pending requests just destroy the\n      // socket and it will get removed from the pool. This\n      // gets us out of timeout issues and allows us to\n      // default to Connection:keep-alive.\n      socket.destroy()\n    }\n  })\n\n}\nutil.inherits(ForeverAgent, Agent)\n\nForeverAgent.defaultMinSockets = 5\n\n\nForeverAgent.prototype.createConnection = net.createConnection\nForeverAgent.prototype.addRequestNoreuse = Agent.prototype.addRequest\nForeverAgent.prototype.addRequest = function(req, host, port) {\n  var name = host + ':' + port\n  if (this.freeSockets[name] && this.freeSockets[name].length > 0 && !req.useChunkedEncodingByDefault) {\n    var idleSocket = this.freeSockets[name].pop()\n    idleSocket.removeListener('error', idleSocket._onIdleError)\n    delete idleSocket._onIdleError\n    req._reusedSocket = true\n    req.onSocket(idleSocket)\n  } else {\n    this.addRequestNoreuse(req, host, port)\n  }\n}\n\nForeverAgent.prototype.removeSocket = function(s, name, host, port) {\n  if (this.sockets[name]) {\n    var index = this.sockets[name].indexOf(s)\n    if (index !== -1) {\n      this.sockets[name].splice(index, 1)\n    }\n  } else if (this.sockets[name] && this.sockets[name].length === 0) {\n    // don't leak\n    delete this.sockets[name]\n    delete this.requests[name]\n  }\n  \n  if (this.freeSockets[name]) {\n    var index = this.freeSockets[name].indexOf(s)\n    if (index !== -1) {\n      this.freeSockets[name].splice(index, 1)\n      if (this.freeSockets[name].length === 0) {\n        delete this.freeSockets[name]\n      }\n    }\n  }\n\n  if (this.requests[name] && this.requests[name].length) {\n    // If we have pending requests and a socket gets closed a new one\n    // needs to be created to take over in the pool for the one that closed.\n    this.createSocket(name, host, port).emit('free')\n  }\n}\n\nfunction ForeverAgentSSL (options) {\n  ForeverAgent.call(this, options)\n}\nutil.inherits(ForeverAgentSSL, ForeverAgent)\n\nForeverAgentSSL.prototype.createConnection = createConnectionSSL\nForeverAgentSSL.prototype.addRequestNoreuse = AgentSSL.prototype.addRequest\n\nfunction createConnectionSSL (port, host, options) {\n  if (typeof port === 'object') {\n    options = port;\n  } else if (typeof host === 'object') {\n    options = host;\n  } else if (typeof options === 'object') {\n    options = options;\n  } else {\n    options = {};\n  }\n\n  if (typeof port === 'number') {\n    options.port = port;\n  }\n\n  if (typeof host === 'string') {\n    options.host = host;\n  }\n\n  return tls.connect(options);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}