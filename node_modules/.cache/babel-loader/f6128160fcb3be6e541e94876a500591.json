{"ast":null,"code":"// Copyright 2011 Joyent, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar crypto = require('crypto');\n\n///--- Exported API\n\nmodule.exports = {\n  /**\n   * Simply wraps up the node crypto operations for you, and returns\n   * true or false.  You are expected to pass in an object that was\n   * returned from `parse()`.\n   *\n   * @param {Object} parsedSignature the object you got from `parse`.\n   * @param {String} key either an RSA private key PEM or HMAC secret.\n   * @return {Boolean} true if valid, false otherwise.\n   * @throws {TypeError} if you pass in bad arguments.\n   */\n  verifySignature: function verifySignature(parsedSignature, key) {\n    assert.object(parsedSignature, 'parsedSignature');\n    assert.string(key, 'key');\n    var alg = parsedSignature.algorithm.match(/(HMAC|RSA|DSA)-(\\w+)/);\n    if (!alg || alg.length !== 3) throw new TypeError('parsedSignature: unsupported algorithm ' + parsedSignature.algorithm);\n    if (alg[1] === 'HMAC') {\n      var hmac = crypto.createHmac(alg[2].toUpperCase(), key);\n      hmac.update(parsedSignature.signingString);\n      return hmac.digest('base64') === parsedSignature.params.signature;\n    } else {\n      var verify = crypto.createVerify(alg[0]);\n      verify.update(parsedSignature.signingString);\n      return verify.verify(key, parsedSignature.params.signature, 'base64');\n    }\n  }\n};","map":{"version":3,"names":["assert","require","crypto","module","exports","verifySignature","parsedSignature","key","object","string","alg","algorithm","match","length","TypeError","hmac","createHmac","toUpperCase","update","signingString","digest","params","signature","verify","createVerify"],"sources":["/Users/jaraga/CodeOp/perthesclinica/node_modules/http-signature/lib/verify.js"],"sourcesContent":["// Copyright 2011 Joyent, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar crypto = require('crypto');\n\n\n\n///--- Exported API\n\nmodule.exports = {\n\n  /**\n   * Simply wraps up the node crypto operations for you, and returns\n   * true or false.  You are expected to pass in an object that was\n   * returned from `parse()`.\n   *\n   * @param {Object} parsedSignature the object you got from `parse`.\n   * @param {String} key either an RSA private key PEM or HMAC secret.\n   * @return {Boolean} true if valid, false otherwise.\n   * @throws {TypeError} if you pass in bad arguments.\n   */\n  verifySignature: function verifySignature(parsedSignature, key) {\n    assert.object(parsedSignature, 'parsedSignature');\n    assert.string(key, 'key');\n\n    var alg = parsedSignature.algorithm.match(/(HMAC|RSA|DSA)-(\\w+)/);\n    if (!alg || alg.length !== 3)\n      throw new TypeError('parsedSignature: unsupported algorithm ' +\n                          parsedSignature.algorithm);\n\n    if (alg[1] === 'HMAC') {\n      var hmac = crypto.createHmac(alg[2].toUpperCase(), key);\n      hmac.update(parsedSignature.signingString);\n      return (hmac.digest('base64') === parsedSignature.params.signature);\n    } else {\n      var verify = crypto.createVerify(alg[0]);\n      verify.update(parsedSignature.signingString);\n      return verify.verify(key, parsedSignature.params.signature, 'base64');\n    }\n  }\n\n};\n"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,aAAa,CAAC;AACnC,IAAIC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;;AAI9B;;AAEAE,MAAM,CAACC,OAAO,GAAG;EAEf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,eAAe,EAAE,SAASA,eAAe,CAACC,eAAe,EAAEC,GAAG,EAAE;IAC9DP,MAAM,CAACQ,MAAM,CAACF,eAAe,EAAE,iBAAiB,CAAC;IACjDN,MAAM,CAACS,MAAM,CAACF,GAAG,EAAE,KAAK,CAAC;IAEzB,IAAIG,GAAG,GAAGJ,eAAe,CAACK,SAAS,CAACC,KAAK,CAAC,sBAAsB,CAAC;IACjE,IAAI,CAACF,GAAG,IAAIA,GAAG,CAACG,MAAM,KAAK,CAAC,EAC1B,MAAM,IAAIC,SAAS,CAAC,yCAAyC,GACzCR,eAAe,CAACK,SAAS,CAAC;IAEhD,IAAID,GAAG,CAAC,CAAC,CAAC,KAAK,MAAM,EAAE;MACrB,IAAIK,IAAI,GAAGb,MAAM,CAACc,UAAU,CAACN,GAAG,CAAC,CAAC,CAAC,CAACO,WAAW,EAAE,EAAEV,GAAG,CAAC;MACvDQ,IAAI,CAACG,MAAM,CAACZ,eAAe,CAACa,aAAa,CAAC;MAC1C,OAAQJ,IAAI,CAACK,MAAM,CAAC,QAAQ,CAAC,KAAKd,eAAe,CAACe,MAAM,CAACC,SAAS;IACpE,CAAC,MAAM;MACL,IAAIC,MAAM,GAAGrB,MAAM,CAACsB,YAAY,CAACd,GAAG,CAAC,CAAC,CAAC,CAAC;MACxCa,MAAM,CAACL,MAAM,CAACZ,eAAe,CAACa,aAAa,CAAC;MAC5C,OAAOI,MAAM,CAACA,MAAM,CAAChB,GAAG,EAAED,eAAe,CAACe,MAAM,CAACC,SAAS,EAAE,QAAQ,CAAC;IACvE;EACF;AAEF,CAAC"},"metadata":{},"sourceType":"script"}