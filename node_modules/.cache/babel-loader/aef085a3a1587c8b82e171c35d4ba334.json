{"ast":null,"code":"// Copyright 2012 Joyent, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar crypto = require('crypto');\nvar asn1 = require('asn1');\nvar ctype = require('ctype');\n\n///--- Helpers\n\nfunction readNext(buffer, offset) {\n  var len = ctype.ruint32(buffer, 'big', offset);\n  offset += 4;\n  var newOffset = offset + len;\n  return {\n    data: buffer.slice(offset, newOffset),\n    offset: newOffset\n  };\n}\nfunction writeInt(writer, buffer) {\n  writer.writeByte(0x02); // ASN1.Integer\n  writer.writeLength(buffer.length);\n  for (var i = 0; i < buffer.length; i++) writer.writeByte(buffer[i]);\n  return writer;\n}\nfunction rsaToPEM(key) {\n  var buffer;\n  var der;\n  var exponent;\n  var i;\n  var modulus;\n  var newKey = '';\n  var offset = 0;\n  var type;\n  var tmp;\n  try {\n    buffer = new Buffer(key.split(' ')[1], 'base64');\n    tmp = readNext(buffer, offset);\n    type = tmp.data.toString();\n    offset = tmp.offset;\n    if (type !== 'ssh-rsa') throw new Error('Invalid ssh key type: ' + type);\n    tmp = readNext(buffer, offset);\n    exponent = tmp.data;\n    offset = tmp.offset;\n    tmp = readNext(buffer, offset);\n    modulus = tmp.data;\n  } catch (e) {\n    throw new Error('Invalid ssh key: ' + key);\n  }\n\n  // DER is a subset of BER\n  der = new asn1.BerWriter();\n  der.startSequence();\n  der.startSequence();\n  der.writeOID('1.2.840.113549.1.1.1');\n  der.writeNull();\n  der.endSequence();\n  der.startSequence(0x03); // bit string\n  der.writeByte(0x00);\n\n  // Actual key\n  der.startSequence();\n  writeInt(der, modulus);\n  writeInt(der, exponent);\n  der.endSequence();\n\n  // bit string\n  der.endSequence();\n  der.endSequence();\n  tmp = der.buffer.toString('base64');\n  for (i = 0; i < tmp.length; i++) {\n    if (i % 64 === 0) newKey += '\\n';\n    newKey += tmp.charAt(i);\n  }\n  if (!/\\\\n$/.test(newKey)) newKey += '\\n';\n  return '-----BEGIN PUBLIC KEY-----' + newKey + '-----END PUBLIC KEY-----\\n';\n}\nfunction dsaToPEM(key) {\n  var buffer;\n  var offset = 0;\n  var tmp;\n  var der;\n  var newKey = '';\n  var type;\n  var p;\n  var q;\n  var g;\n  var y;\n  try {\n    buffer = new Buffer(key.split(' ')[1], 'base64');\n    tmp = readNext(buffer, offset);\n    type = tmp.data.toString();\n    offset = tmp.offset;\n\n    /* JSSTYLED */\n    if (!/^ssh-ds[as].*/.test(type)) throw new Error('Invalid ssh key type: ' + type);\n    tmp = readNext(buffer, offset);\n    p = tmp.data;\n    offset = tmp.offset;\n    tmp = readNext(buffer, offset);\n    q = tmp.data;\n    offset = tmp.offset;\n    tmp = readNext(buffer, offset);\n    g = tmp.data;\n    offset = tmp.offset;\n    tmp = readNext(buffer, offset);\n    y = tmp.data;\n  } catch (e) {\n    console.log(e.stack);\n    throw new Error('Invalid ssh key: ' + key);\n  }\n\n  // DER is a subset of BER\n  der = new asn1.BerWriter();\n  der.startSequence();\n  der.startSequence();\n  der.writeOID('1.2.840.10040.4.1');\n  der.startSequence();\n  writeInt(der, p);\n  writeInt(der, q);\n  writeInt(der, g);\n  der.endSequence();\n  der.endSequence();\n  der.startSequence(0x03); // bit string\n  der.writeByte(0x00);\n  writeInt(der, y);\n  der.endSequence();\n  der.endSequence();\n  tmp = der.buffer.toString('base64');\n  for (var i = 0; i < tmp.length; i++) {\n    if (i % 64 === 0) newKey += '\\n';\n    newKey += tmp.charAt(i);\n  }\n  if (!/\\\\n$/.test(newKey)) newKey += '\\n';\n  return '-----BEGIN PUBLIC KEY-----' + newKey + '-----END PUBLIC KEY-----\\n';\n}\n\n///--- API\n\nmodule.exports = {\n  /**\n   * Converts an OpenSSH public key (rsa only) to a PKCS#8 PEM file.\n   *\n   * The intent of this module is to interoperate with OpenSSL only,\n   * specifically the node crypto module's `verify` method.\n   *\n   * @param {String} key an OpenSSH public key.\n   * @return {String} PEM encoded form of the RSA public key.\n   * @throws {TypeError} on bad input.\n   * @throws {Error} on invalid ssh key formatted data.\n   */\n  sshKeyToPEM: function sshKeyToPEM(key) {\n    assert.string(key, 'ssh_key');\n\n    /* JSSTYLED */\n    if (/^ssh-rsa.*/.test(key)) return rsaToPEM(key);\n\n    /* JSSTYLED */\n    if (/^ssh-ds[as].*/.test(key)) return dsaToPEM(key);\n    throw new Error('Only RSA and DSA public keys are allowed');\n  },\n  /**\n   * Generates an OpenSSH fingerprint from an ssh public key.\n   *\n   * @param {String} key an OpenSSH public key.\n   * @return {String} key fingerprint.\n   * @throws {TypeError} on bad input.\n   * @throws {Error} if what you passed doesn't look like an ssh public key.\n   */\n  fingerprint: function fingerprint(key) {\n    assert.string(key, 'ssh_key');\n    var pieces = key.split(' ');\n    if (!pieces || !pieces.length || pieces.length < 2) throw new Error('invalid ssh key');\n    var data = new Buffer(pieces[1], 'base64');\n    var hash = crypto.createHash('md5');\n    hash.update(data);\n    var digest = hash.digest('hex');\n    var fp = '';\n    for (var i = 0; i < digest.length; i++) {\n      if (i && i % 2 === 0) fp += ':';\n      fp += digest[i];\n    }\n    return fp;\n  },\n  /**\n  * Converts a PKGCS#8 PEM file to an OpenSSH public key (rsa)\n  *\n  * The reverse of the above function.\n  */\n  pemToRsaSSHKey: function pemToRsaSSHKey(pem, comment) {\n    assert.equal('string', typeof pem, 'typeof pem');\n\n    // chop off the BEGIN PUBLIC KEY and END PUBLIC KEY portion\n    var cleaned = pem.split('\\n').slice(1, -2).join('');\n    var buf = new Buffer(cleaned, 'base64');\n    var der = new asn1.BerReader(buf);\n    der.readSequence();\n    der.readSequence();\n    var oid = der.readOID();\n    assert.equal(oid, '1.2.840.113549.1.1.1', 'pem not in RSA format');\n\n    // Null -- XXX this probably isn't good practice\n    der.readByte();\n    der.readByte();\n\n    // bit string sequence\n    der.readSequence(0x03);\n    der.readByte();\n    der.readSequence();\n\n    // modulus\n    assert.equal(der.peek(), asn1.Ber.Integer, 'modulus not an integer');\n    der._offset = der.readLength(der.offset + 1);\n    var modulus = der._buf.slice(der.offset, der.offset + der.length);\n    der._offset += der.length;\n\n    // exponent\n    assert.equal(der.peek(), asn1.Ber.Integer, 'exponent not an integer');\n    der._offset = der.readLength(der.offset + 1);\n    var exponent = der._buf.slice(der.offset, der.offset + der.length);\n    der._offset += der.length;\n\n    // now, make the key\n    var type = new Buffer('ssh-rsa');\n    var buffer = new Buffer(4 + type.length + 4 + modulus.length + 4 + exponent.length);\n    var i = 0;\n    buffer.writeUInt32BE(type.length, i);\n    i += 4;\n    type.copy(buffer, i);\n    i += type.length;\n    buffer.writeUInt32BE(exponent.length, i);\n    i += 4;\n    exponent.copy(buffer, i);\n    i += exponent.length;\n    buffer.writeUInt32BE(modulus.length, i);\n    i += 4;\n    modulus.copy(buffer, i);\n    i += modulus.length;\n    var s = type.toString() + ' ' + buffer.toString('base64') + ' ' + (comment || '');\n    return s;\n  }\n};","map":{"version":3,"names":["assert","require","crypto","asn1","ctype","readNext","buffer","offset","len","ruint32","newOffset","data","slice","writeInt","writer","writeByte","writeLength","length","i","rsaToPEM","key","der","exponent","modulus","newKey","type","tmp","Buffer","split","toString","Error","e","BerWriter","startSequence","writeOID","writeNull","endSequence","charAt","test","dsaToPEM","p","q","g","y","console","log","stack","module","exports","sshKeyToPEM","string","fingerprint","pieces","hash","createHash","update","digest","fp","pemToRsaSSHKey","pem","comment","equal","cleaned","join","buf","BerReader","readSequence","oid","readOID","readByte","peek","Ber","Integer","_offset","readLength","_buf","writeUInt32BE","copy","s"],"sources":["/Users/jaraga/CodeOp/perthesclinica/node_modules/http-signature/lib/util.js"],"sourcesContent":["// Copyright 2012 Joyent, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar crypto = require('crypto');\n\nvar asn1 = require('asn1');\nvar ctype = require('ctype');\n\n\n\n///--- Helpers\n\nfunction readNext(buffer, offset) {\n  var len = ctype.ruint32(buffer, 'big', offset);\n  offset += 4;\n\n  var newOffset = offset + len;\n\n  return {\n    data: buffer.slice(offset, newOffset),\n    offset: newOffset\n  };\n}\n\n\nfunction writeInt(writer, buffer) {\n  writer.writeByte(0x02); // ASN1.Integer\n  writer.writeLength(buffer.length);\n\n  for (var i = 0; i < buffer.length; i++)\n    writer.writeByte(buffer[i]);\n\n  return writer;\n}\n\n\nfunction rsaToPEM(key) {\n  var buffer;\n  var der;\n  var exponent;\n  var i;\n  var modulus;\n  var newKey = '';\n  var offset = 0;\n  var type;\n  var tmp;\n\n  try {\n    buffer = new Buffer(key.split(' ')[1], 'base64');\n\n    tmp = readNext(buffer, offset);\n    type = tmp.data.toString();\n    offset = tmp.offset;\n\n    if (type !== 'ssh-rsa')\n      throw new Error('Invalid ssh key type: ' + type);\n\n    tmp = readNext(buffer, offset);\n    exponent = tmp.data;\n    offset = tmp.offset;\n\n    tmp = readNext(buffer, offset);\n    modulus = tmp.data;\n  } catch (e) {\n    throw new Error('Invalid ssh key: ' + key);\n  }\n\n  // DER is a subset of BER\n  der = new asn1.BerWriter();\n\n  der.startSequence();\n\n  der.startSequence();\n  der.writeOID('1.2.840.113549.1.1.1');\n  der.writeNull();\n  der.endSequence();\n\n  der.startSequence(0x03); // bit string\n  der.writeByte(0x00);\n\n  // Actual key\n  der.startSequence();\n  writeInt(der, modulus);\n  writeInt(der, exponent);\n  der.endSequence();\n\n  // bit string\n  der.endSequence();\n\n  der.endSequence();\n\n  tmp = der.buffer.toString('base64');\n  for (i = 0; i < tmp.length; i++) {\n    if ((i % 64) === 0)\n      newKey += '\\n';\n    newKey += tmp.charAt(i);\n  }\n\n  if (!/\\\\n$/.test(newKey))\n    newKey += '\\n';\n\n  return '-----BEGIN PUBLIC KEY-----' + newKey + '-----END PUBLIC KEY-----\\n';\n}\n\n\nfunction dsaToPEM(key) {\n  var buffer;\n  var offset = 0;\n  var tmp;\n  var der;\n  var newKey = '';\n\n  var type;\n  var p;\n  var q;\n  var g;\n  var y;\n\n  try {\n    buffer = new Buffer(key.split(' ')[1], 'base64');\n\n    tmp = readNext(buffer, offset);\n    type = tmp.data.toString();\n    offset = tmp.offset;\n\n    /* JSSTYLED */\n    if (!/^ssh-ds[as].*/.test(type))\n      throw new Error('Invalid ssh key type: ' + type);\n\n    tmp = readNext(buffer, offset);\n    p = tmp.data;\n    offset = tmp.offset;\n\n    tmp = readNext(buffer, offset);\n    q = tmp.data;\n    offset = tmp.offset;\n\n    tmp = readNext(buffer, offset);\n    g = tmp.data;\n    offset = tmp.offset;\n\n    tmp = readNext(buffer, offset);\n    y = tmp.data;\n  } catch (e) {\n    console.log(e.stack);\n    throw new Error('Invalid ssh key: ' + key);\n  }\n\n  // DER is a subset of BER\n  der = new asn1.BerWriter();\n\n  der.startSequence();\n\n  der.startSequence();\n  der.writeOID('1.2.840.10040.4.1');\n\n  der.startSequence();\n  writeInt(der, p);\n  writeInt(der, q);\n  writeInt(der, g);\n  der.endSequence();\n\n  der.endSequence();\n\n  der.startSequence(0x03); // bit string\n  der.writeByte(0x00);\n  writeInt(der, y);\n  der.endSequence();\n\n  der.endSequence();\n\n  tmp = der.buffer.toString('base64');\n  for (var i = 0; i < tmp.length; i++) {\n    if ((i % 64) === 0)\n      newKey += '\\n';\n    newKey += tmp.charAt(i);\n  }\n\n  if (!/\\\\n$/.test(newKey))\n    newKey += '\\n';\n\n  return '-----BEGIN PUBLIC KEY-----' + newKey + '-----END PUBLIC KEY-----\\n';\n}\n\n\n///--- API\n\nmodule.exports = {\n\n  /**\n   * Converts an OpenSSH public key (rsa only) to a PKCS#8 PEM file.\n   *\n   * The intent of this module is to interoperate with OpenSSL only,\n   * specifically the node crypto module's `verify` method.\n   *\n   * @param {String} key an OpenSSH public key.\n   * @return {String} PEM encoded form of the RSA public key.\n   * @throws {TypeError} on bad input.\n   * @throws {Error} on invalid ssh key formatted data.\n   */\n  sshKeyToPEM: function sshKeyToPEM(key) {\n    assert.string(key, 'ssh_key');\n\n    /* JSSTYLED */\n    if (/^ssh-rsa.*/.test(key))\n      return rsaToPEM(key);\n\n    /* JSSTYLED */\n    if (/^ssh-ds[as].*/.test(key))\n      return dsaToPEM(key);\n\n    throw new Error('Only RSA and DSA public keys are allowed');\n  },\n\n\n  /**\n   * Generates an OpenSSH fingerprint from an ssh public key.\n   *\n   * @param {String} key an OpenSSH public key.\n   * @return {String} key fingerprint.\n   * @throws {TypeError} on bad input.\n   * @throws {Error} if what you passed doesn't look like an ssh public key.\n   */\n  fingerprint: function fingerprint(key) {\n    assert.string(key, 'ssh_key');\n\n    var pieces = key.split(' ');\n    if (!pieces || !pieces.length || pieces.length < 2)\n      throw new Error('invalid ssh key');\n\n    var data = new Buffer(pieces[1], 'base64');\n\n    var hash = crypto.createHash('md5');\n    hash.update(data);\n    var digest = hash.digest('hex');\n\n    var fp = '';\n    for (var i = 0; i < digest.length; i++) {\n      if (i && i % 2 === 0)\n        fp += ':';\n\n      fp += digest[i];\n    }\n\n    return fp;\n  },\n\n  /**\n  * Converts a PKGCS#8 PEM file to an OpenSSH public key (rsa)\n  *\n  * The reverse of the above function.\n  */\n  pemToRsaSSHKey: function pemToRsaSSHKey(pem, comment) {\n    assert.equal('string', typeof pem, 'typeof pem');\n\n    // chop off the BEGIN PUBLIC KEY and END PUBLIC KEY portion\n    var cleaned = pem.split('\\n').slice(1, -2).join('');\n\n    var buf = new Buffer(cleaned, 'base64');\n\n    var der = new asn1.BerReader(buf);\n\n    der.readSequence();\n    der.readSequence();\n\n    var oid = der.readOID();\n    assert.equal(oid, '1.2.840.113549.1.1.1', 'pem not in RSA format');\n\n    // Null -- XXX this probably isn't good practice\n    der.readByte();\n    der.readByte();\n\n    // bit string sequence\n    der.readSequence(0x03);\n    der.readByte();\n    der.readSequence();\n\n    // modulus\n    assert.equal(der.peek(), asn1.Ber.Integer, 'modulus not an integer');\n    der._offset = der.readLength(der.offset + 1);\n    var modulus = der._buf.slice(der.offset, der.offset + der.length);\n    der._offset += der.length;\n\n    // exponent\n    assert.equal(der.peek(), asn1.Ber.Integer, 'exponent not an integer');\n    der._offset = der.readLength(der.offset + 1);\n    var exponent = der._buf.slice(der.offset, der.offset + der.length);\n    der._offset += der.length;\n\n    // now, make the key\n    var type = new Buffer('ssh-rsa');\n    var buffer = new Buffer(4 + type.length + 4 + modulus.length + 4 + exponent.length);\n    var i = 0;\n    buffer.writeUInt32BE(type.length, i);     i += 4;\n    type.copy(buffer, i);                     i += type.length;\n    buffer.writeUInt32BE(exponent.length, i); i += 4;\n    exponent.copy(buffer, i);                 i += exponent.length;\n    buffer.writeUInt32BE(modulus.length, i);  i += 4;\n    modulus.copy(buffer, i);                  i += modulus.length;\n\n    var s = type.toString() + ' ' + buffer.toString('base64') + ' ' + (comment || '');\n    return s;\n  }\n};\n"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,aAAa,CAAC;AACnC,IAAIC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAE9B,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC1B,IAAIG,KAAK,GAAGH,OAAO,CAAC,OAAO,CAAC;;AAI5B;;AAEA,SAASI,QAAQ,CAACC,MAAM,EAAEC,MAAM,EAAE;EAChC,IAAIC,GAAG,GAAGJ,KAAK,CAACK,OAAO,CAACH,MAAM,EAAE,KAAK,EAAEC,MAAM,CAAC;EAC9CA,MAAM,IAAI,CAAC;EAEX,IAAIG,SAAS,GAAGH,MAAM,GAAGC,GAAG;EAE5B,OAAO;IACLG,IAAI,EAAEL,MAAM,CAACM,KAAK,CAACL,MAAM,EAAEG,SAAS,CAAC;IACrCH,MAAM,EAAEG;EACV,CAAC;AACH;AAGA,SAASG,QAAQ,CAACC,MAAM,EAAER,MAAM,EAAE;EAChCQ,MAAM,CAACC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;EACxBD,MAAM,CAACE,WAAW,CAACV,MAAM,CAACW,MAAM,CAAC;EAEjC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,MAAM,CAACW,MAAM,EAAEC,CAAC,EAAE,EACpCJ,MAAM,CAACC,SAAS,CAACT,MAAM,CAACY,CAAC,CAAC,CAAC;EAE7B,OAAOJ,MAAM;AACf;AAGA,SAASK,QAAQ,CAACC,GAAG,EAAE;EACrB,IAAId,MAAM;EACV,IAAIe,GAAG;EACP,IAAIC,QAAQ;EACZ,IAAIJ,CAAC;EACL,IAAIK,OAAO;EACX,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIjB,MAAM,GAAG,CAAC;EACd,IAAIkB,IAAI;EACR,IAAIC,GAAG;EAEP,IAAI;IACFpB,MAAM,GAAG,IAAIqB,MAAM,CAACP,GAAG,CAACQ,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC;IAEhDF,GAAG,GAAGrB,QAAQ,CAACC,MAAM,EAAEC,MAAM,CAAC;IAC9BkB,IAAI,GAAGC,GAAG,CAACf,IAAI,CAACkB,QAAQ,EAAE;IAC1BtB,MAAM,GAAGmB,GAAG,CAACnB,MAAM;IAEnB,IAAIkB,IAAI,KAAK,SAAS,EACpB,MAAM,IAAIK,KAAK,CAAC,wBAAwB,GAAGL,IAAI,CAAC;IAElDC,GAAG,GAAGrB,QAAQ,CAACC,MAAM,EAAEC,MAAM,CAAC;IAC9Be,QAAQ,GAAGI,GAAG,CAACf,IAAI;IACnBJ,MAAM,GAAGmB,GAAG,CAACnB,MAAM;IAEnBmB,GAAG,GAAGrB,QAAQ,CAACC,MAAM,EAAEC,MAAM,CAAC;IAC9BgB,OAAO,GAAGG,GAAG,CAACf,IAAI;EACpB,CAAC,CAAC,OAAOoB,CAAC,EAAE;IACV,MAAM,IAAID,KAAK,CAAC,mBAAmB,GAAGV,GAAG,CAAC;EAC5C;;EAEA;EACAC,GAAG,GAAG,IAAIlB,IAAI,CAAC6B,SAAS,EAAE;EAE1BX,GAAG,CAACY,aAAa,EAAE;EAEnBZ,GAAG,CAACY,aAAa,EAAE;EACnBZ,GAAG,CAACa,QAAQ,CAAC,sBAAsB,CAAC;EACpCb,GAAG,CAACc,SAAS,EAAE;EACfd,GAAG,CAACe,WAAW,EAAE;EAEjBf,GAAG,CAACY,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;EACzBZ,GAAG,CAACN,SAAS,CAAC,IAAI,CAAC;;EAEnB;EACAM,GAAG,CAACY,aAAa,EAAE;EACnBpB,QAAQ,CAACQ,GAAG,EAAEE,OAAO,CAAC;EACtBV,QAAQ,CAACQ,GAAG,EAAEC,QAAQ,CAAC;EACvBD,GAAG,CAACe,WAAW,EAAE;;EAEjB;EACAf,GAAG,CAACe,WAAW,EAAE;EAEjBf,GAAG,CAACe,WAAW,EAAE;EAEjBV,GAAG,GAAGL,GAAG,CAACf,MAAM,CAACuB,QAAQ,CAAC,QAAQ,CAAC;EACnC,KAAKX,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGQ,GAAG,CAACT,MAAM,EAAEC,CAAC,EAAE,EAAE;IAC/B,IAAKA,CAAC,GAAG,EAAE,KAAM,CAAC,EAChBM,MAAM,IAAI,IAAI;IAChBA,MAAM,IAAIE,GAAG,CAACW,MAAM,CAACnB,CAAC,CAAC;EACzB;EAEA,IAAI,CAAC,MAAM,CAACoB,IAAI,CAACd,MAAM,CAAC,EACtBA,MAAM,IAAI,IAAI;EAEhB,OAAO,4BAA4B,GAAGA,MAAM,GAAG,4BAA4B;AAC7E;AAGA,SAASe,QAAQ,CAACnB,GAAG,EAAE;EACrB,IAAId,MAAM;EACV,IAAIC,MAAM,GAAG,CAAC;EACd,IAAImB,GAAG;EACP,IAAIL,GAAG;EACP,IAAIG,MAAM,GAAG,EAAE;EAEf,IAAIC,IAAI;EACR,IAAIe,CAAC;EACL,IAAIC,CAAC;EACL,IAAIC,CAAC;EACL,IAAIC,CAAC;EAEL,IAAI;IACFrC,MAAM,GAAG,IAAIqB,MAAM,CAACP,GAAG,CAACQ,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC;IAEhDF,GAAG,GAAGrB,QAAQ,CAACC,MAAM,EAAEC,MAAM,CAAC;IAC9BkB,IAAI,GAAGC,GAAG,CAACf,IAAI,CAACkB,QAAQ,EAAE;IAC1BtB,MAAM,GAAGmB,GAAG,CAACnB,MAAM;;IAEnB;IACA,IAAI,CAAC,eAAe,CAAC+B,IAAI,CAACb,IAAI,CAAC,EAC7B,MAAM,IAAIK,KAAK,CAAC,wBAAwB,GAAGL,IAAI,CAAC;IAElDC,GAAG,GAAGrB,QAAQ,CAACC,MAAM,EAAEC,MAAM,CAAC;IAC9BiC,CAAC,GAAGd,GAAG,CAACf,IAAI;IACZJ,MAAM,GAAGmB,GAAG,CAACnB,MAAM;IAEnBmB,GAAG,GAAGrB,QAAQ,CAACC,MAAM,EAAEC,MAAM,CAAC;IAC9BkC,CAAC,GAAGf,GAAG,CAACf,IAAI;IACZJ,MAAM,GAAGmB,GAAG,CAACnB,MAAM;IAEnBmB,GAAG,GAAGrB,QAAQ,CAACC,MAAM,EAAEC,MAAM,CAAC;IAC9BmC,CAAC,GAAGhB,GAAG,CAACf,IAAI;IACZJ,MAAM,GAAGmB,GAAG,CAACnB,MAAM;IAEnBmB,GAAG,GAAGrB,QAAQ,CAACC,MAAM,EAAEC,MAAM,CAAC;IAC9BoC,CAAC,GAAGjB,GAAG,CAACf,IAAI;EACd,CAAC,CAAC,OAAOoB,CAAC,EAAE;IACVa,OAAO,CAACC,GAAG,CAACd,CAAC,CAACe,KAAK,CAAC;IACpB,MAAM,IAAIhB,KAAK,CAAC,mBAAmB,GAAGV,GAAG,CAAC;EAC5C;;EAEA;EACAC,GAAG,GAAG,IAAIlB,IAAI,CAAC6B,SAAS,EAAE;EAE1BX,GAAG,CAACY,aAAa,EAAE;EAEnBZ,GAAG,CAACY,aAAa,EAAE;EACnBZ,GAAG,CAACa,QAAQ,CAAC,mBAAmB,CAAC;EAEjCb,GAAG,CAACY,aAAa,EAAE;EACnBpB,QAAQ,CAACQ,GAAG,EAAEmB,CAAC,CAAC;EAChB3B,QAAQ,CAACQ,GAAG,EAAEoB,CAAC,CAAC;EAChB5B,QAAQ,CAACQ,GAAG,EAAEqB,CAAC,CAAC;EAChBrB,GAAG,CAACe,WAAW,EAAE;EAEjBf,GAAG,CAACe,WAAW,EAAE;EAEjBf,GAAG,CAACY,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;EACzBZ,GAAG,CAACN,SAAS,CAAC,IAAI,CAAC;EACnBF,QAAQ,CAACQ,GAAG,EAAEsB,CAAC,CAAC;EAChBtB,GAAG,CAACe,WAAW,EAAE;EAEjBf,GAAG,CAACe,WAAW,EAAE;EAEjBV,GAAG,GAAGL,GAAG,CAACf,MAAM,CAACuB,QAAQ,CAAC,QAAQ,CAAC;EACnC,KAAK,IAAIX,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGQ,GAAG,CAACT,MAAM,EAAEC,CAAC,EAAE,EAAE;IACnC,IAAKA,CAAC,GAAG,EAAE,KAAM,CAAC,EAChBM,MAAM,IAAI,IAAI;IAChBA,MAAM,IAAIE,GAAG,CAACW,MAAM,CAACnB,CAAC,CAAC;EACzB;EAEA,IAAI,CAAC,MAAM,CAACoB,IAAI,CAACd,MAAM,CAAC,EACtBA,MAAM,IAAI,IAAI;EAEhB,OAAO,4BAA4B,GAAGA,MAAM,GAAG,4BAA4B;AAC7E;;AAGA;;AAEAuB,MAAM,CAACC,OAAO,GAAG;EAEf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,WAAW,EAAE,SAASA,WAAW,CAAC7B,GAAG,EAAE;IACrCpB,MAAM,CAACkD,MAAM,CAAC9B,GAAG,EAAE,SAAS,CAAC;;IAE7B;IACA,IAAI,YAAY,CAACkB,IAAI,CAAClB,GAAG,CAAC,EACxB,OAAOD,QAAQ,CAACC,GAAG,CAAC;;IAEtB;IACA,IAAI,eAAe,CAACkB,IAAI,CAAClB,GAAG,CAAC,EAC3B,OAAOmB,QAAQ,CAACnB,GAAG,CAAC;IAEtB,MAAM,IAAIU,KAAK,CAAC,0CAA0C,CAAC;EAC7D,CAAC;EAGD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEqB,WAAW,EAAE,SAASA,WAAW,CAAC/B,GAAG,EAAE;IACrCpB,MAAM,CAACkD,MAAM,CAAC9B,GAAG,EAAE,SAAS,CAAC;IAE7B,IAAIgC,MAAM,GAAGhC,GAAG,CAACQ,KAAK,CAAC,GAAG,CAAC;IAC3B,IAAI,CAACwB,MAAM,IAAI,CAACA,MAAM,CAACnC,MAAM,IAAImC,MAAM,CAACnC,MAAM,GAAG,CAAC,EAChD,MAAM,IAAIa,KAAK,CAAC,iBAAiB,CAAC;IAEpC,IAAInB,IAAI,GAAG,IAAIgB,MAAM,CAACyB,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC;IAE1C,IAAIC,IAAI,GAAGnD,MAAM,CAACoD,UAAU,CAAC,KAAK,CAAC;IACnCD,IAAI,CAACE,MAAM,CAAC5C,IAAI,CAAC;IACjB,IAAI6C,MAAM,GAAGH,IAAI,CAACG,MAAM,CAAC,KAAK,CAAC;IAE/B,IAAIC,EAAE,GAAG,EAAE;IACX,KAAK,IAAIvC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsC,MAAM,CAACvC,MAAM,EAAEC,CAAC,EAAE,EAAE;MACtC,IAAIA,CAAC,IAAIA,CAAC,GAAG,CAAC,KAAK,CAAC,EAClBuC,EAAE,IAAI,GAAG;MAEXA,EAAE,IAAID,MAAM,CAACtC,CAAC,CAAC;IACjB;IAEA,OAAOuC,EAAE;EACX,CAAC;EAED;AACF;AACA;AACA;AACA;EACEC,cAAc,EAAE,SAASA,cAAc,CAACC,GAAG,EAAEC,OAAO,EAAE;IACpD5D,MAAM,CAAC6D,KAAK,CAAC,QAAQ,EAAE,OAAOF,GAAG,EAAE,YAAY,CAAC;;IAEhD;IACA,IAAIG,OAAO,GAAGH,GAAG,CAAC/B,KAAK,CAAC,IAAI,CAAC,CAAChB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACmD,IAAI,CAAC,EAAE,CAAC;IAEnD,IAAIC,GAAG,GAAG,IAAIrC,MAAM,CAACmC,OAAO,EAAE,QAAQ,CAAC;IAEvC,IAAIzC,GAAG,GAAG,IAAIlB,IAAI,CAAC8D,SAAS,CAACD,GAAG,CAAC;IAEjC3C,GAAG,CAAC6C,YAAY,EAAE;IAClB7C,GAAG,CAAC6C,YAAY,EAAE;IAElB,IAAIC,GAAG,GAAG9C,GAAG,CAAC+C,OAAO,EAAE;IACvBpE,MAAM,CAAC6D,KAAK,CAACM,GAAG,EAAE,sBAAsB,EAAE,uBAAuB,CAAC;;IAElE;IACA9C,GAAG,CAACgD,QAAQ,EAAE;IACdhD,GAAG,CAACgD,QAAQ,EAAE;;IAEd;IACAhD,GAAG,CAAC6C,YAAY,CAAC,IAAI,CAAC;IACtB7C,GAAG,CAACgD,QAAQ,EAAE;IACdhD,GAAG,CAAC6C,YAAY,EAAE;;IAElB;IACAlE,MAAM,CAAC6D,KAAK,CAACxC,GAAG,CAACiD,IAAI,EAAE,EAAEnE,IAAI,CAACoE,GAAG,CAACC,OAAO,EAAE,wBAAwB,CAAC;IACpEnD,GAAG,CAACoD,OAAO,GAAGpD,GAAG,CAACqD,UAAU,CAACrD,GAAG,CAACd,MAAM,GAAG,CAAC,CAAC;IAC5C,IAAIgB,OAAO,GAAGF,GAAG,CAACsD,IAAI,CAAC/D,KAAK,CAACS,GAAG,CAACd,MAAM,EAAEc,GAAG,CAACd,MAAM,GAAGc,GAAG,CAACJ,MAAM,CAAC;IACjEI,GAAG,CAACoD,OAAO,IAAIpD,GAAG,CAACJ,MAAM;;IAEzB;IACAjB,MAAM,CAAC6D,KAAK,CAACxC,GAAG,CAACiD,IAAI,EAAE,EAAEnE,IAAI,CAACoE,GAAG,CAACC,OAAO,EAAE,yBAAyB,CAAC;IACrEnD,GAAG,CAACoD,OAAO,GAAGpD,GAAG,CAACqD,UAAU,CAACrD,GAAG,CAACd,MAAM,GAAG,CAAC,CAAC;IAC5C,IAAIe,QAAQ,GAAGD,GAAG,CAACsD,IAAI,CAAC/D,KAAK,CAACS,GAAG,CAACd,MAAM,EAAEc,GAAG,CAACd,MAAM,GAAGc,GAAG,CAACJ,MAAM,CAAC;IAClEI,GAAG,CAACoD,OAAO,IAAIpD,GAAG,CAACJ,MAAM;;IAEzB;IACA,IAAIQ,IAAI,GAAG,IAAIE,MAAM,CAAC,SAAS,CAAC;IAChC,IAAIrB,MAAM,GAAG,IAAIqB,MAAM,CAAC,CAAC,GAAGF,IAAI,CAACR,MAAM,GAAG,CAAC,GAAGM,OAAO,CAACN,MAAM,GAAG,CAAC,GAAGK,QAAQ,CAACL,MAAM,CAAC;IACnF,IAAIC,CAAC,GAAG,CAAC;IACTZ,MAAM,CAACsE,aAAa,CAACnD,IAAI,CAACR,MAAM,EAAEC,CAAC,CAAC;IAAMA,CAAC,IAAI,CAAC;IAChDO,IAAI,CAACoD,IAAI,CAACvE,MAAM,EAAEY,CAAC,CAAC;IAAsBA,CAAC,IAAIO,IAAI,CAACR,MAAM;IAC1DX,MAAM,CAACsE,aAAa,CAACtD,QAAQ,CAACL,MAAM,EAAEC,CAAC,CAAC;IAAEA,CAAC,IAAI,CAAC;IAChDI,QAAQ,CAACuD,IAAI,CAACvE,MAAM,EAAEY,CAAC,CAAC;IAAkBA,CAAC,IAAII,QAAQ,CAACL,MAAM;IAC9DX,MAAM,CAACsE,aAAa,CAACrD,OAAO,CAACN,MAAM,EAAEC,CAAC,CAAC;IAAGA,CAAC,IAAI,CAAC;IAChDK,OAAO,CAACsD,IAAI,CAACvE,MAAM,EAAEY,CAAC,CAAC;IAAmBA,CAAC,IAAIK,OAAO,CAACN,MAAM;IAE7D,IAAI6D,CAAC,GAAGrD,IAAI,CAACI,QAAQ,EAAE,GAAG,GAAG,GAAGvB,MAAM,CAACuB,QAAQ,CAAC,QAAQ,CAAC,GAAG,GAAG,IAAI+B,OAAO,IAAI,EAAE,CAAC;IACjF,OAAOkB,CAAC;EACV;AACF,CAAC"},"metadata":{},"sourceType":"script"}