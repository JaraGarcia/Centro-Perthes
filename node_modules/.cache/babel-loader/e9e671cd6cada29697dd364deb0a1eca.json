{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.array.unshift.js\");\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n/*<replacement>*/\nvar Buffer = require('buffer').Buffer;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\nvar EE = require('events').EventEmitter;\n\n/*<replacement>*/\nif (!EE.listenerCount) EE.listenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\nvar Stream = require('stream');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar StringDecoder;\nutil.inherits(Readable, Stream);\nfunction ReadableState(options, stream) {\n  options = options || {};\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  this.highWaterMark = hwm || hwm === 0 ? hwm : 16 * 1024;\n\n  // cast to ints.\n  this.highWaterMark = ~~this.highWaterMark;\n  this.buffer = [];\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = false;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // In streams that never have any data, and do push(null) right away,\n  // the consumer can miss the 'end' event if they do some I/O before\n  // consuming the stream.  So, we don't emit('end') until some reading\n  // happens.\n  this.calledRead = false;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, becuase any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // when piping, we only care about 'readable' events that happen\n  // after read()ing all the bytes and not getting any pushback.\n  this.ranOut = false;\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\nfunction Readable(options) {\n  if (!(this instanceof Readable)) return new Readable(options);\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n  Stream.call(this);\n}\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  if (typeof chunk === 'string' && !state.objectMode) {\n    encoding = encoding || state.defaultEncoding;\n    if (encoding !== state.encoding) {\n      chunk = new Buffer(chunk, encoding);\n      encoding = '';\n    }\n  }\n  return readableAddChunk(this, state, chunk, encoding, false);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  var state = this._readableState;\n  return readableAddChunk(this, state, chunk, '', true);\n};\nfunction readableAddChunk(stream, state, chunk, encoding, addToFront) {\n  var er = chunkInvalid(state, chunk);\n  if (er) {\n    stream.emit('error', er);\n  } else if (chunk === null || chunk === undefined) {\n    state.reading = false;\n    if (!state.ended) onEofChunk(stream, state);\n  } else if (state.objectMode || chunk && chunk.length > 0) {\n    if (state.ended && !addToFront) {\n      var e = new Error('stream.push() after EOF');\n      stream.emit('error', e);\n    } else if (state.endEmitted && addToFront) {\n      var e = new Error('stream.unshift() after end event');\n      stream.emit('error', e);\n    } else {\n      if (state.decoder && !addToFront && !encoding) chunk = state.decoder.write(chunk);\n\n      // update the buffer info.\n      state.length += state.objectMode ? 1 : chunk.length;\n      if (addToFront) {\n        state.buffer.unshift(chunk);\n      } else {\n        state.reading = false;\n        state.buffer.push(chunk);\n      }\n      if (state.needReadable) emitReadable(stream);\n      maybeReadMore(stream, state);\n    }\n  } else if (!addToFront) {\n    state.reading = false;\n  }\n  return needMoreData(state);\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n};\n\n// Don't raise the hwm > 128MB\nvar MAX_HWM = 0x800000;\nfunction roundUpToNextPowerOf2(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2\n    n--;\n    for (var p = 1; p < 32; p <<= 1) n |= n >> p;\n    n++;\n  }\n  return n;\n}\nfunction howMuchToRead(n, state) {\n  if (state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return n === 0 ? 0 : 1;\n  if (n === null || isNaN(n)) {\n    // only flow one buffer at a time\n    if (state.flowing && state.buffer.length) return state.buffer[0].length;else return state.length;\n  }\n  if (n <= 0) return 0;\n\n  // If we're asking for more than the target buffer level,\n  // then raise the water mark.  Bump up to the next highest\n  // power of 2, to prevent increasing it excessively in tiny\n  // amounts.\n  if (n > state.highWaterMark) state.highWaterMark = roundUpToNextPowerOf2(n);\n\n  // don't have that much.  return null, unless we've ended.\n  if (n > state.length) {\n    if (!state.ended) {\n      state.needReadable = true;\n      return 0;\n    } else return state.length;\n  }\n  return n;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  var state = this._readableState;\n  state.calledRead = true;\n  var nOrig = n;\n  var ret;\n  if (typeof n !== 'number' || n > 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    emitReadable(this);\n    return null;\n  }\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    ret = null;\n\n    // In cases where the decoder did not receive enough data\n    // to produce a full chunk, then immediately received an\n    // EOF, state.buffer will contain [<Buffer >, <Buffer 00 ...>].\n    // howMuchToRead will see this and coerce the amount to\n    // read to zero (because it's looking at the length of the\n    // first <Buffer > in state.buffer), and we'll end up here.\n    //\n    // This can only happen via state.decoder -- no other venue\n    // exists for pushing a zero-length chunk into state.buffer\n    // and triggering this behavior. In this case, we return our\n    // remaining data and end the stream, if appropriate.\n    if (state.length > 0 && state.decoder) {\n      ret = fromList(n, state);\n      state.length -= ret.length;\n    }\n    if (state.length === 0) endReadable(this);\n    return ret;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length - n <= state.highWaterMark) doRead = true;\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) doRead = false;\n  if (doRead) {\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n  }\n\n  // If _read called its callback synchronously, then `reading`\n  // will be false, and we need to re-evaluate how much data we\n  // can return to the user.\n  if (doRead && !state.reading) n = howMuchToRead(nOrig, state);\n  if (n > 0) ret = fromList(n, state);else ret = null;\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  }\n  state.length -= n;\n\n  // If we have nothing in the buffer, then we want to know\n  // as soon as we *do* get something into the buffer.\n  if (state.length === 0 && !state.ended) state.needReadable = true;\n\n  // If we happened to read() exactly the remaining amount in the\n  // buffer, and the EOF has been seen at this point, then make sure\n  // that we emit 'end' on the very next tick.\n  if (state.ended && !state.endEmitted && state.length === 0) endReadable(this);\n  return ret;\n};\nfunction chunkInvalid(state, chunk) {\n  var er = null;\n  if (!Buffer.isBuffer(chunk) && 'string' !== typeof chunk && chunk !== null && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\nfunction onEofChunk(stream, state) {\n  if (state.decoder && !state.ended) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // if we've ended and we have some data left, then emit\n  // 'readable' now to make sure it gets picked up.\n  if (state.length > 0) emitReadable(stream);else endReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (state.emittedReadable) return;\n  state.emittedReadable = true;\n  if (state.sync) process.nextTick(function () {\n    emitReadable_(stream);\n  });else emitReadable_(stream);\n}\nfunction emitReadable_(stream) {\n  stream.emit('readable');\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    process.nextTick(function () {\n      maybeReadMore_(stream, state);\n    });\n  }\n}\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('not implemented'));\n};\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n  var endFn = doEnd ? onend : cleanup;\n  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable) {\n    if (readable !== src) return;\n    cleanup();\n  }\n  function onend() {\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n  function cleanup() {\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', cleanup);\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (!dest._writableState || dest._writableState.needDrain) ondrain();\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EE.listenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n  // This is a brutally ugly hack to make sure that our error handler\n  // is attached before any userland ones.  NEVER DO THIS.\n  if (!dest._events || !dest._events.error) dest.on('error', onerror);else if (isArray(dest._events.error)) dest._events.error.unshift(onerror);else dest._events.error = [onerror, dest._events.error];\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n  function unpipe() {\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    // the handler that waits for readable events after all\n    // the data gets sucked out in flow.\n    // This would be easier to follow with a .once() handler\n    // in flow(), but that is too slow.\n    this.on('readable', pipeOnReadable);\n    state.flowing = true;\n    process.nextTick(function () {\n      flow(src);\n    });\n  }\n  return dest;\n};\nfunction pipeOnDrain(src) {\n  return function () {\n    var dest = this;\n    var state = src._readableState;\n    state.awaitDrain--;\n    if (state.awaitDrain === 0) flow(src);\n  };\n}\nfunction flow(src) {\n  var state = src._readableState;\n  var chunk;\n  state.awaitDrain = 0;\n  function write(dest, i, list) {\n    var written = dest.write(chunk);\n    if (false === written) {\n      state.awaitDrain++;\n    }\n  }\n  while (state.pipesCount && null !== (chunk = src.read())) {\n    if (state.pipesCount === 1) write(state.pipes, 0, null);else forEach(state.pipes, write);\n    src.emit('data', chunk);\n\n    // if anyone needs a drain, then we have to wait for that.\n    if (state.awaitDrain > 0) return;\n  }\n\n  // if every destination was unpiped, either before entering this\n  // function, or in the while loop, then stop flowing.\n  //\n  // NB: This is a pretty rare edge case.\n  if (state.pipesCount === 0) {\n    state.flowing = false;\n\n    // if there were data event listeners added, then switch to old mode.\n    if (EE.listenerCount(src, 'data') > 0) emitDataEvents(src);\n    return;\n  }\n\n  // at this point, no one needed a drain, so we just ran out of data\n  // on the next readable event, start it over again.\n  state.ranOut = true;\n}\nfunction pipeOnReadable() {\n  if (this._readableState.ranOut) {\n    this._readableState.ranOut = false;\n    flow(this);\n  }\n}\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    this.removeListener('readable', pipeOnReadable);\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    this.removeListener('readable', pipeOnReadable);\n    state.flowing = false;\n    for (var i = 0; i < len; i++) dests[i].emit('unpipe', this);\n    return this;\n  }\n\n  // try to find the right one.\n  var i = indexOf(state.pipes, dest);\n  if (i === -1) return this;\n  state.pipes.splice(i, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n  dest.emit('unpipe', this);\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n  if (ev === 'data' && !this._readableState.flowing) emitDataEvents(this);\n  if (ev === 'readable' && this.readable) {\n    var state = this._readableState;\n    if (!state.readableListening) {\n      state.readableListening = true;\n      state.emittedReadable = false;\n      state.needReadable = true;\n      if (!state.reading) {\n        this.read(0);\n      } else if (state.length) {\n        emitReadable(this, state);\n      }\n    }\n  }\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  emitDataEvents(this);\n  this.read(0);\n  this.emit('resume');\n};\nReadable.prototype.pause = function () {\n  emitDataEvents(this, true);\n  this.emit('pause');\n};\nfunction emitDataEvents(stream, startPaused) {\n  var state = stream._readableState;\n  if (state.flowing) {\n    // https://github.com/isaacs/readable-stream/issues/16\n    throw new Error('Cannot switch to old mode now.');\n  }\n  var paused = startPaused || false;\n  var readable = false;\n\n  // convert to an old-style stream.\n  stream.readable = true;\n  stream.pipe = Stream.prototype.pipe;\n  stream.on = stream.addListener = Stream.prototype.on;\n  stream.on('readable', function () {\n    readable = true;\n    var c;\n    while (!paused && null !== (c = stream.read())) stream.emit('data', c);\n    if (c === null) {\n      readable = false;\n      stream._readableState.needReadable = true;\n    }\n  });\n  stream.pause = function () {\n    paused = true;\n    this.emit('pause');\n  };\n  stream.resume = function () {\n    paused = false;\n    if (readable) process.nextTick(function () {\n      stream.emit('readable');\n    });else this.read(0);\n    this.emit('resume');\n  };\n\n  // now make it start, just in case it hadn't already.\n  stream.emit('readable');\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var state = this._readableState;\n  var paused = false;\n  var self = this;\n  stream.on('end', function () {\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) self.push(chunk);\n    }\n    self.push(null);\n  });\n  stream.on('data', function (chunk) {\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    //if (state.objectMode && util.isNullOrUndefined(chunk))\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n    var ret = self.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (typeof stream[i] === 'function' && typeof this[i] === 'undefined') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  var events = ['error', 'close', 'destroy', 'pause', 'resume'];\n  forEach(events, function (ev) {\n    stream.on(ev, self.emit.bind(self, ev));\n  });\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  self._read = function (n) {\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n  return self;\n};\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\nfunction fromList(n, state) {\n  var list = state.buffer;\n  var length = state.length;\n  var stringMode = !!state.decoder;\n  var objectMode = !!state.objectMode;\n  var ret;\n\n  // nothing in the list, definitely empty.\n  if (list.length === 0) return null;\n  if (length === 0) ret = null;else if (objectMode) ret = list.shift();else if (!n || n >= length) {\n    // read it all, truncate the array.\n    if (stringMode) ret = list.join('');else ret = Buffer.concat(list, length);\n    list.length = 0;\n  } else {\n    // read just some of it.\n    if (n < list[0].length) {\n      // just take a part of the first list item.\n      // slice is the same for buffers and strings.\n      var buf = list[0];\n      ret = buf.slice(0, n);\n      list[0] = buf.slice(n);\n    } else if (n === list[0].length) {\n      // first list is a perfect match\n      ret = list.shift();\n    } else {\n      // complex case.\n      // we have enough to cover it, but it spans past the first buffer.\n      if (stringMode) ret = '';else ret = new Buffer(n);\n      var c = 0;\n      for (var i = 0, l = list.length; i < l && c < n; i++) {\n        var buf = list[0];\n        var cpy = Math.min(n - c, buf.length);\n        if (stringMode) ret += buf.slice(0, cpy);else buf.copy(ret, c, 0, cpy);\n        if (cpy < buf.length) list[0] = buf.slice(cpy);else list.shift();\n        c += cpy;\n      }\n    }\n  }\n  return ret;\n}\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('endReadable called on non-empty stream');\n  if (!state.endEmitted && state.calledRead) {\n    state.ended = true;\n    process.nextTick(function () {\n      // Check that we didn't get one last unshift.\n      if (!state.endEmitted && state.length === 0) {\n        state.endEmitted = true;\n        stream.readable = false;\n        stream.emit('end');\n      }\n    });\n  }\n}\nfunction forEach(xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}","map":{"version":3,"names":["module","exports","Readable","isArray","require","Buffer","ReadableState","EE","EventEmitter","listenerCount","emitter","type","listeners","length","Stream","util","inherits","StringDecoder","options","stream","hwm","highWaterMark","buffer","pipes","pipesCount","flowing","ended","endEmitted","reading","calledRead","sync","needReadable","emittedReadable","readableListening","objectMode","defaultEncoding","ranOut","awaitDrain","readingMore","decoder","encoding","_readableState","readable","call","prototype","push","chunk","state","readableAddChunk","unshift","addToFront","er","chunkInvalid","emit","undefined","onEofChunk","e","Error","write","emitReadable","maybeReadMore","needMoreData","setEncoding","enc","MAX_HWM","roundUpToNextPowerOf2","n","p","howMuchToRead","isNaN","read","nOrig","ret","fromList","endReadable","doRead","_read","isBuffer","TypeError","end","process","nextTick","emitReadable_","maybeReadMore_","len","pipe","dest","pipeOpts","src","doEnd","stdout","stderr","endFn","onend","cleanup","once","on","onunpipe","ondrain","pipeOnDrain","removeListener","onclose","onfinish","onerror","_writableState","needDrain","unpipe","_events","error","pipeOnReadable","flow","i","list","written","forEach","emitDataEvents","dests","indexOf","splice","ev","fn","res","addListener","resume","pause","startPaused","paused","c","wrap","self","method","apply","arguments","events","bind","_fromList","stringMode","shift","join","concat","buf","slice","l","cpy","Math","min","copy","xs","f","x"],"sources":["/Users/jaraga/CodeOp/perthesclinica/node_modules/stream-wrapper/node_modules/readable-stream/lib/_stream_readable.js"],"sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n\n/*<replacement>*/\nvar Buffer = require('buffer').Buffer;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\nvar EE = require('events').EventEmitter;\n\n/*<replacement>*/\nif (!EE.listenerCount) EE.listenerCount = function(emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\nvar Stream = require('stream');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nfunction ReadableState(options, stream) {\n  options = options || {};\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;\n\n  // cast to ints.\n  this.highWaterMark = ~~this.highWaterMark;\n\n  this.buffer = [];\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = false;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // In streams that never have any data, and do push(null) right away,\n  // the consumer can miss the 'end' event if they do some I/O before\n  // consuming the stream.  So, we don't emit('end') until some reading\n  // happens.\n  this.calledRead = false;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, becuase any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // when piping, we only care about 'readable' events that happen\n  // after read()ing all the bytes and not getting any pushback.\n  this.ranOut = false;\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder)\n      StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  if (!(this instanceof Readable))\n    return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  Stream.call(this);\n}\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function(chunk, encoding) {\n  var state = this._readableState;\n\n  if (typeof chunk === 'string' && !state.objectMode) {\n    encoding = encoding || state.defaultEncoding;\n    if (encoding !== state.encoding) {\n      chunk = new Buffer(chunk, encoding);\n      encoding = '';\n    }\n  }\n\n  return readableAddChunk(this, state, chunk, encoding, false);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function(chunk) {\n  var state = this._readableState;\n  return readableAddChunk(this, state, chunk, '', true);\n};\n\nfunction readableAddChunk(stream, state, chunk, encoding, addToFront) {\n  var er = chunkInvalid(state, chunk);\n  if (er) {\n    stream.emit('error', er);\n  } else if (chunk === null || chunk === undefined) {\n    state.reading = false;\n    if (!state.ended)\n      onEofChunk(stream, state);\n  } else if (state.objectMode || chunk && chunk.length > 0) {\n    if (state.ended && !addToFront) {\n      var e = new Error('stream.push() after EOF');\n      stream.emit('error', e);\n    } else if (state.endEmitted && addToFront) {\n      var e = new Error('stream.unshift() after end event');\n      stream.emit('error', e);\n    } else {\n      if (state.decoder && !addToFront && !encoding)\n        chunk = state.decoder.write(chunk);\n\n      // update the buffer info.\n      state.length += state.objectMode ? 1 : chunk.length;\n      if (addToFront) {\n        state.buffer.unshift(chunk);\n      } else {\n        state.reading = false;\n        state.buffer.push(chunk);\n      }\n\n      if (state.needReadable)\n        emitReadable(stream);\n\n      maybeReadMore(stream, state);\n    }\n  } else if (!addToFront) {\n    state.reading = false;\n  }\n\n  return needMoreData(state);\n}\n\n\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended &&\n         (state.needReadable ||\n          state.length < state.highWaterMark ||\n          state.length === 0);\n}\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function(enc) {\n  if (!StringDecoder)\n    StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n};\n\n// Don't raise the hwm > 128MB\nvar MAX_HWM = 0x800000;\nfunction roundUpToNextPowerOf2(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2\n    n--;\n    for (var p = 1; p < 32; p <<= 1) n |= n >> p;\n    n++;\n  }\n  return n;\n}\n\nfunction howMuchToRead(n, state) {\n  if (state.length === 0 && state.ended)\n    return 0;\n\n  if (state.objectMode)\n    return n === 0 ? 0 : 1;\n\n  if (n === null || isNaN(n)) {\n    // only flow one buffer at a time\n    if (state.flowing && state.buffer.length)\n      return state.buffer[0].length;\n    else\n      return state.length;\n  }\n\n  if (n <= 0)\n    return 0;\n\n  // If we're asking for more than the target buffer level,\n  // then raise the water mark.  Bump up to the next highest\n  // power of 2, to prevent increasing it excessively in tiny\n  // amounts.\n  if (n > state.highWaterMark)\n    state.highWaterMark = roundUpToNextPowerOf2(n);\n\n  // don't have that much.  return null, unless we've ended.\n  if (n > state.length) {\n    if (!state.ended) {\n      state.needReadable = true;\n      return 0;\n    } else\n      return state.length;\n  }\n\n  return n;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function(n) {\n  var state = this._readableState;\n  state.calledRead = true;\n  var nOrig = n;\n  var ret;\n\n  if (typeof n !== 'number' || n > 0)\n    state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 &&\n      state.needReadable &&\n      (state.length >= state.highWaterMark || state.ended)) {\n    emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    ret = null;\n\n    // In cases where the decoder did not receive enough data\n    // to produce a full chunk, then immediately received an\n    // EOF, state.buffer will contain [<Buffer >, <Buffer 00 ...>].\n    // howMuchToRead will see this and coerce the amount to\n    // read to zero (because it's looking at the length of the\n    // first <Buffer > in state.buffer), and we'll end up here.\n    //\n    // This can only happen via state.decoder -- no other venue\n    // exists for pushing a zero-length chunk into state.buffer\n    // and triggering this behavior. In this case, we return our\n    // remaining data and end the stream, if appropriate.\n    if (state.length > 0 && state.decoder) {\n      ret = fromList(n, state);\n      state.length -= ret.length;\n    }\n\n    if (state.length === 0)\n      endReadable(this);\n\n    return ret;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length - n <= state.highWaterMark)\n    doRead = true;\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading)\n    doRead = false;\n\n  if (doRead) {\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0)\n      state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n  }\n\n  // If _read called its callback synchronously, then `reading`\n  // will be false, and we need to re-evaluate how much data we\n  // can return to the user.\n  if (doRead && !state.reading)\n    n = howMuchToRead(nOrig, state);\n\n  if (n > 0)\n    ret = fromList(n, state);\n  else\n    ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  }\n\n  state.length -= n;\n\n  // If we have nothing in the buffer, then we want to know\n  // as soon as we *do* get something into the buffer.\n  if (state.length === 0 && !state.ended)\n    state.needReadable = true;\n\n  // If we happened to read() exactly the remaining amount in the\n  // buffer, and the EOF has been seen at this point, then make sure\n  // that we emit 'end' on the very next tick.\n  if (state.ended && !state.endEmitted && state.length === 0)\n    endReadable(this);\n\n  return ret;\n};\n\nfunction chunkInvalid(state, chunk) {\n  var er = null;\n  if (!Buffer.isBuffer(chunk) &&\n      'string' !== typeof chunk &&\n      chunk !== null &&\n      chunk !== undefined &&\n      !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\n\nfunction onEofChunk(stream, state) {\n  if (state.decoder && !state.ended) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // if we've ended and we have some data left, then emit\n  // 'readable' now to make sure it gets picked up.\n  if (state.length > 0)\n    emitReadable(stream);\n  else\n    endReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (state.emittedReadable)\n    return;\n\n  state.emittedReadable = true;\n  if (state.sync)\n    process.nextTick(function() {\n      emitReadable_(stream);\n    });\n  else\n    emitReadable_(stream);\n}\n\nfunction emitReadable_(stream) {\n  stream.emit('readable');\n}\n\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    process.nextTick(function() {\n      maybeReadMore_(stream, state);\n    });\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended &&\n         state.length < state.highWaterMark) {\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;\n    else\n      len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function(n) {\n  this.emit('error', new Error('not implemented'));\n};\n\nReadable.prototype.pipe = function(dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&\n              dest !== process.stdout &&\n              dest !== process.stderr;\n\n  var endFn = doEnd ? onend : cleanup;\n  if (state.endEmitted)\n    process.nextTick(endFn);\n  else\n    src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable) {\n    if (readable !== src) return;\n    cleanup();\n  }\n\n  function onend() {\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  function cleanup() {\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', cleanup);\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (!dest._writableState || dest._writableState.needDrain)\n      ondrain();\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EE.listenerCount(dest, 'error') === 0)\n      dest.emit('error', er);\n  }\n  // This is a brutally ugly hack to make sure that our error handler\n  // is attached before any userland ones.  NEVER DO THIS.\n  if (!dest._events || !dest._events.error)\n    dest.on('error', onerror);\n  else if (isArray(dest._events.error))\n    dest._events.error.unshift(onerror);\n  else\n    dest._events.error = [onerror, dest._events.error];\n\n\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    // the handler that waits for readable events after all\n    // the data gets sucked out in flow.\n    // This would be easier to follow with a .once() handler\n    // in flow(), but that is too slow.\n    this.on('readable', pipeOnReadable);\n\n    state.flowing = true;\n    process.nextTick(function() {\n      flow(src);\n    });\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function() {\n    var dest = this;\n    var state = src._readableState;\n    state.awaitDrain--;\n    if (state.awaitDrain === 0)\n      flow(src);\n  };\n}\n\nfunction flow(src) {\n  var state = src._readableState;\n  var chunk;\n  state.awaitDrain = 0;\n\n  function write(dest, i, list) {\n    var written = dest.write(chunk);\n    if (false === written) {\n      state.awaitDrain++;\n    }\n  }\n\n  while (state.pipesCount && null !== (chunk = src.read())) {\n\n    if (state.pipesCount === 1)\n      write(state.pipes, 0, null);\n    else\n      forEach(state.pipes, write);\n\n    src.emit('data', chunk);\n\n    // if anyone needs a drain, then we have to wait for that.\n    if (state.awaitDrain > 0)\n      return;\n  }\n\n  // if every destination was unpiped, either before entering this\n  // function, or in the while loop, then stop flowing.\n  //\n  // NB: This is a pretty rare edge case.\n  if (state.pipesCount === 0) {\n    state.flowing = false;\n\n    // if there were data event listeners added, then switch to old mode.\n    if (EE.listenerCount(src, 'data') > 0)\n      emitDataEvents(src);\n    return;\n  }\n\n  // at this point, no one needed a drain, so we just ran out of data\n  // on the next readable event, start it over again.\n  state.ranOut = true;\n}\n\nfunction pipeOnReadable() {\n  if (this._readableState.ranOut) {\n    this._readableState.ranOut = false;\n    flow(this);\n  }\n}\n\n\nReadable.prototype.unpipe = function(dest) {\n  var state = this._readableState;\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0)\n    return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes)\n      return this;\n\n    if (!dest)\n      dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    this.removeListener('readable', pipeOnReadable);\n    state.flowing = false;\n    if (dest)\n      dest.emit('unpipe', this);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    this.removeListener('readable', pipeOnReadable);\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++)\n      dests[i].emit('unpipe', this);\n    return this;\n  }\n\n  // try to find the right one.\n  var i = indexOf(state.pipes, dest);\n  if (i === -1)\n    return this;\n\n  state.pipes.splice(i, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1)\n    state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function(ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  if (ev === 'data' && !this._readableState.flowing)\n    emitDataEvents(this);\n\n  if (ev === 'readable' && this.readable) {\n    var state = this._readableState;\n    if (!state.readableListening) {\n      state.readableListening = true;\n      state.emittedReadable = false;\n      state.needReadable = true;\n      if (!state.reading) {\n        this.read(0);\n      } else if (state.length) {\n        emitReadable(this, state);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function() {\n  emitDataEvents(this);\n  this.read(0);\n  this.emit('resume');\n};\n\nReadable.prototype.pause = function() {\n  emitDataEvents(this, true);\n  this.emit('pause');\n};\n\nfunction emitDataEvents(stream, startPaused) {\n  var state = stream._readableState;\n\n  if (state.flowing) {\n    // https://github.com/isaacs/readable-stream/issues/16\n    throw new Error('Cannot switch to old mode now.');\n  }\n\n  var paused = startPaused || false;\n  var readable = false;\n\n  // convert to an old-style stream.\n  stream.readable = true;\n  stream.pipe = Stream.prototype.pipe;\n  stream.on = stream.addListener = Stream.prototype.on;\n\n  stream.on('readable', function() {\n    readable = true;\n\n    var c;\n    while (!paused && (null !== (c = stream.read())))\n      stream.emit('data', c);\n\n    if (c === null) {\n      readable = false;\n      stream._readableState.needReadable = true;\n    }\n  });\n\n  stream.pause = function() {\n    paused = true;\n    this.emit('pause');\n  };\n\n  stream.resume = function() {\n    paused = false;\n    if (readable)\n      process.nextTick(function() {\n        stream.emit('readable');\n      });\n    else\n      this.read(0);\n    this.emit('resume');\n  };\n\n  // now make it start, just in case it hadn't already.\n  stream.emit('readable');\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function(stream) {\n  var state = this._readableState;\n  var paused = false;\n\n  var self = this;\n  stream.on('end', function() {\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length)\n        self.push(chunk);\n    }\n\n    self.push(null);\n  });\n\n  stream.on('data', function(chunk) {\n    if (state.decoder)\n      chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    //if (state.objectMode && util.isNullOrUndefined(chunk))\n    if (state.objectMode && (chunk === null || chunk === undefined))\n      return;\n    else if (!state.objectMode && (!chunk || !chunk.length))\n      return;\n\n    var ret = self.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (typeof stream[i] === 'function' &&\n        typeof this[i] === 'undefined') {\n      this[i] = function(method) { return function() {\n        return stream[method].apply(stream, arguments);\n      }}(i);\n    }\n  }\n\n  // proxy certain important events.\n  var events = ['error', 'close', 'destroy', 'pause', 'resume'];\n  forEach(events, function(ev) {\n    stream.on(ev, self.emit.bind(self, ev));\n  });\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  self._read = function(n) {\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return self;\n};\n\n\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\nfunction fromList(n, state) {\n  var list = state.buffer;\n  var length = state.length;\n  var stringMode = !!state.decoder;\n  var objectMode = !!state.objectMode;\n  var ret;\n\n  // nothing in the list, definitely empty.\n  if (list.length === 0)\n    return null;\n\n  if (length === 0)\n    ret = null;\n  else if (objectMode)\n    ret = list.shift();\n  else if (!n || n >= length) {\n    // read it all, truncate the array.\n    if (stringMode)\n      ret = list.join('');\n    else\n      ret = Buffer.concat(list, length);\n    list.length = 0;\n  } else {\n    // read just some of it.\n    if (n < list[0].length) {\n      // just take a part of the first list item.\n      // slice is the same for buffers and strings.\n      var buf = list[0];\n      ret = buf.slice(0, n);\n      list[0] = buf.slice(n);\n    } else if (n === list[0].length) {\n      // first list is a perfect match\n      ret = list.shift();\n    } else {\n      // complex case.\n      // we have enough to cover it, but it spans past the first buffer.\n      if (stringMode)\n        ret = '';\n      else\n        ret = new Buffer(n);\n\n      var c = 0;\n      for (var i = 0, l = list.length; i < l && c < n; i++) {\n        var buf = list[0];\n        var cpy = Math.min(n - c, buf.length);\n\n        if (stringMode)\n          ret += buf.slice(0, cpy);\n        else\n          buf.copy(ret, c, 0, cpy);\n\n        if (cpy < buf.length)\n          list[0] = buf.slice(cpy);\n        else\n          list.shift();\n\n        c += cpy;\n      }\n    }\n  }\n\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0)\n    throw new Error('endReadable called on non-empty stream');\n\n  if (!state.endEmitted && state.calledRead) {\n    state.ended = true;\n    process.nextTick(function() {\n      // Check that we didn't get one last unshift.\n      if (!state.endEmitted && state.length === 0) {\n        state.endEmitted = true;\n        stream.readable = false;\n        stream.emit('end');\n      }\n    });\n  }\n}\n\nfunction forEach (xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n\nfunction indexOf (xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}